// 2020 ccpc 秦皇岛 C题 
// 题意：给定矩形长宽w,h，矩形内一点bob，矩形内n点nu[i]，问从bob射出两条射线，求这两条射线截矩形边长的最大值，且要求这两条射线及所截边围成的多边形内不存在nu[i]。
//
// 涉及问题： 极角排序， 两直线求交点，等
#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define memarray(array,val) memset(array,val,sizeof(array))
const int MAXN=5e5+10;
const int INF=0x3f3f3f3f;
const double EPS=1e-6;
inline int sgn(double a){return a<-EPS?-1:a>EPS;}
inline int cmp(double a,double b){return sgn(a-b);}
int n,m;
struct Point{
    double x,y;
    Point(double _x=0,double _y=0){
        x=_x;y=_y;
    }
    void read(){
        scanf("%lf%lf",&x,&y);
    }
    Point operator+(Point p){
        return {x+p.x,y+p.y};
    }
    Point operator-(Point p){
        return {x-p.x,y-p.y};
    }
    double operator^(Point p){
        return x*p.y-y*p.x;
    }
    bool operator==(Point p){
        return cmp(x,p.x)==0&&cmp(y,p.y)==0;
    }
};
Point bob;
Point rb[MAXN];
Point rect[5];
// 极角排序， 先判象限，再看叉乘结果，如果叉乘结果小于0，则逆时针，否则顺时针
int getx(Point p){
    if(p.x>=bob.x&&p.y>=bob.y)return 1;
    if(p.x<bob.x&&p.y>=bob.y)return 2;
    if(p.x<bob.x&&p.y<bob.y)return 3;
    return 4;
}
bool pcmp(Point p1,Point p2){
    int x1=getx(p1);
    int x2=getx(p2);
    if(x1!=x2)return x1<x2;
    return ((p1-bob)^(p2-bob))>=0;
}
// 极角排序

double getPercent(Point p){
    if(sgn(p.x)){
        if(sgn(p.y)){
            if(cmp(p.x,rect[2].x)==0){
                return (p.x+p.y)/((rect[2].x+rect[2].y)*2);
            }else{
                return (rect[2].x*2-p.x+p.y)/((rect[2].x+rect[2].y)*2);
            }
        }else{
            return p.x/((rect[2].x+rect[2].y)*2);
        }
    }else{
        if(sgn(p.y)==0)return 0;
        return ((rect[2].x+rect[2].y)*2-p.y)/((rect[2].x+rect[2].y)*2);
    }
}
double check(Point p1,Point p2){
    double x1=getPercent(p1),x2=getPercent(p2);
    if(cmp(x1,x2)>0)x2+=1;
    x2-=x1;
    return ((rect[2].x+rect[2].y)*2)*x2;
}

// 直线工具类
struct Line{
    Point s,e;
    int lineCrossSeg(Line v){
        int d1=sgn((e-s)^(v.s-s));
        int d2=sgn((e-s)^(v.e-s));;
        if((d1^d2)==-2)return 2;
        return (d1==0||d2==0);
    }
    // 求两个直线交点
    Point crossPoint(Line v){
        double a1=(v.e-v.s)^(s-v.s);
        double a2=(v.e-v.s)^(e-v.s);
        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));
    }
}line[10];
Point getcros(Point p){
    Line l={bob,p};
    Point vec=p-bob;
    if(sgn(vec.x)==0){
        if(sgn(vec.y)>=0){
            return l.crossPoint(line[3]);
        }else{
            return l.crossPoint(line[1]);
        }
    }
    if(sgn(vec.y)==0){
        if(sgn(vec.x)>=0){
            return l.crossPoint(line[2]);
        }else{
            return l.crossPoint(line[4]);
        }
    }

    if(sgn(vec.x)>0){
        if(sgn(vec.y)>0){
            if(l.lineCrossSeg(line[2])){
                return l.crossPoint(line[2]);
            }else{
                return l.crossPoint(line[3]);
            }
        }else{
            if(l.lineCrossSeg(line[2])){
                return l.crossPoint(line[2]);
            }else{
                return l.crossPoint(line[1]);
            }
        }
    }else{
        if(sgn(vec.y)>0){
            if(l.lineCrossSeg(line[3])){
                return l.crossPoint(line[3]);
            }else{
                return l.crossPoint(line[4]);
            }
        }else{
            if(l.lineCrossSeg(line[4])){
                return l.crossPoint(line[4]);
            }else{
                return l.crossPoint(line[1]);
            }
        }
    }
//    printf("error\n");
    return {0,0};
}
Point cros[MAXN];
void solve(){
    if(n==1){
        printf("%.8f\n",(rect[2].x+rect[2].y)*2);
        return;
    }
    sort(rb+1,rb+1+n,pcmp);
    double ans=0;
    for(int i=1;i<=n;i++)
        cros[i]=getcros(rb[i]);
    int num=1;
    for(int i=2;i<=n;i++){
        if(!(cros[num]==cros[i])){
            cros[++num]=cros[i];
        }
    }
    if(num==1){
        printf("%.8f\n",(rect[2].x+rect[2].y)*2);
        return;
    }
    for(int i=1;i<num;i++)
        ans=max(ans,check(cros[i],cros[i+1]));
    ans=max(ans,check(cros[num],cros[1]));
    printf("%.8f\n",ans);
}
void init(){
    double tmpx,tmpy;
    scanf("%lf%lf",&tmpx,&tmpy);
    rect[0]={0,0};rect[1]={tmpx,0};
    rect[2]={tmpx,tmpy},rect[3]={0,tmpy};
    line[1]={rect[0],rect[1]};
    line[2]={rect[1],rect[2]};
    line[3]={rect[2],rect[3]};
    line[4]={rect[3],rect[0]};
    bob.read();
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
        rb[i].read();
}
int main() {
    int T=1;
    scanf("%d",&T);
//    while(T--)
    for(int kase=1;kase<=T;kase++)
    {
        init();
        printf("Case #%d: ",kase);
        solve();
    }
	return 0;
}
/*

5
4 4
2 2
2
1 2
3 2

4 4
2 2
2
2 3
2 1

4 4
1 2
2
2 2
3 2


*/
